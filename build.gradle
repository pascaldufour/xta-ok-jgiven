plugins {
    id "org.akhikhl.gretty" version "1.1.9"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'war'

version = "1.0"

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    testCompile 'com.tngtech.jgiven:jgiven-junit:0.11.0'
    compile "com.sun.jersey:jersey-server:1.18.1"
    compile "com.sun.jersey:jersey-servlet:1.18.1"
    compile "org.slf4j:slf4j-api:1.6.4"
    compile "org.slf4j:slf4j-simple:1.6.4"
    compile "org.json:json:20090211"
    compile "javax.servlet:servlet-api:2.5"
    testCompile "info.cukes:cucumber-junit:1.2.2"
    testCompile "info.cukes:cucumber-java:1.2.2"
    testCompile "com.github.javafaker:javafaker:0.5"
    testCompile "org.seleniumhq.selenium:selenium-java:2.48.1"

    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

task jgivenReport(type: JavaExec, dependsOn: 'test') {
    main = 'com.tngtech.jgiven.report.ReportGenerator'
    args '--targetDir=target/jgiven-reports/html',
            '--format=html'
    classpath = configurations.testCompile
}

ext.fitnessePort = 8000

configurations {
    fitnesse
    cucumberRuntime {
        extendsFrom testRuntime
    }
}


task cucumber() {
    dependsOn assemble, compileTestJava, processTestResources
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', 'pretty', '--glue', 'com/xebia/monopoly/cucumber/stepdefs/', 'src/test/resources']
        }
    }

}


task("writeFitNesseClasspath", type: WriteFitNesseClasspath) {
    classpath = project.configurations.fitnesse + project.configurations.testCompile

    pagePath = project.file("FitNesseRoot/GradleClasspath")
}

project.tasks.getByName("clean").dependsOn("cleanWriteFitNesseClasspath")

task("fitNesseRun", type: JavaExec) {
    dependsOn writeFitNesseClasspath
    dependsOn compileJava
    dependsOn compileTestJava
    classpath configurations.fitnesse
    main "fitnesseMain.FitNesseMain"
    args "-p", "8000", "-e", "0"

}

gretty {
    port = 8081
    servletContainer = 'jetty7'
    integrationTestTask = 'cucumber'
}